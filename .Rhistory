library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
install_from_swirl("R Programming")
library(swirl)
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE, 
install_course_zip("install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE, e/swirl_courses-master.zip", multi=TRUE, 
install_course_zip("install_course_zip("C:/Users/Monika/Downloads/swirl_courses-master.zip", multi=TRUE, e/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install_course_zip("C:/Users/Monika/Downloads/swirl_courses-master.zip", multi=TRUE, e/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install_course_zip("C:/Users/Monika/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
swirl()
library(swirl)
install_course_zip("C:/Users/Monika/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="Data Analysis")
swirl()
swirl()
nxt()
nxt()
cars
cars$mpgcity
cars$mpgCity
myMPG<-cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
mode(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
48
sd(cars$price)
range(cars$price[cars$type="midsize"])
range(cars$price[cars$type=="midsize"])
48.0
skip()
swirl()
10
25
2
3
1
4
summary(cars$price)
q()
getwd()
ls
ls()
getwd()
ls()
source(cachematrix.R)
## makeCacheMatrix creates a special "matrix", which is really a list containing a function to
##set the value of the matrix
##get the value of the matrix
##set the value of the inverse of matrix
##get the value of the inverse of the matrix
##cacheSolvecomputes the inverse of the special "matrix" returned by makeCacheMatrix.
##If the inverse has already been calculated (and the matrix has not changed), 
##then the cachesolve retrieve the inverse from the cache.
## Create a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) m <<- inverse
  getinverse <- function() m
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}
## Return inverse matrix of 'x' 
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
  m <- x$getinverse()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  data <- x$get()
  m <- solve(data)
  x$setinverse(m)
  m
}
ls()
x=rbind(c(1,-1/4),c(-1/4,1))
m=makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
q()
